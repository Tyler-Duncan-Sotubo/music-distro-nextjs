generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                               String    @id @default(cuid())
    name                             String?
    email                            String?   @unique
    password                         String?
    emailVerified                    DateTime?
    emailVerificationToken           String?
    emailVerificationTokenExpiration DateTime?
    image                            String?
    accounts                         Account[]
    sessions                         Session[]
    audio                            Audio[]

    PasswordResetToken PasswordResetToken[]
    UserInformation    UserInformation[]
    Videos             Videos[]
    Subscriptions      Subscriptions[]
    CartItem           CartItem[]
    Social             Social[]
    Stream             Stream[]
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    userId  String
    token   String   @unique
    expires DateTime

    user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserInformation {
    id                   String   @id @default(cuid())
    userId               String   @unique
    artistBio            String?
    firstName            String
    lastName             String
    artistName           String
    label                String
    phone                String
    country              String
    howDidYouHearAboutUs String?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    User User @relation(fields: [userId], references: [id])
}

model Videos {
    id          String   @id @default(cuid())
    userId      String
    title       String
    releaseDate DateTime
    link        String
    keywords    String
    description String
    status      String
    releaseType String
    createdAt   DateTime @default(now())

    User User @relation(fields: [userId], references: [id])
}

model Subscriptions {
    id        String   @id @default(cuid())
    userId    String   @unique
    plan      String
    status    String   @default("active")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    expiresAt DateTime

    User User @relation(fields: [userId], references: [id])
}

model CartItem {
    id          String   @id @default(cuid())
    userId      String
    productId   String   @unique
    product     String
    description String
    price       Int
    quantity    Int
    status      String   @default("active")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    User User @relation(fields: [userId], references: [id])
}

model Social {
    id         String   @id @default(cuid())
    userId     String   @unique
    apple      String?
    spotify    String?
    instagram  String?
    youtube    String?
    facebook   String?
    tiktok     String?
    twitter    String?
    soundcloud String?
    website    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    User User @relation(fields: [userId], references: [id])
}

// Old Stream model to delete soon
model Stream {
    id            String   @id @default(cuid())
    userId        String
    audioId       String
    total_streams Int
    week_start    String
    week_end      String
    apple         Json?    @default("{}")
    spotify       Json?    @default("{}")
    youtube       Json?    @default("{}")
    amazon        Json?    @default("{}")
    tidal         Json?    @default("{}")
    deezer        Json?    @default("{}")
    boomPlay      Json?    @default("{}")
    tiktok        Json?    @default("{}")
    facebook      Json?    @default("{}")
    createdAt     DateTime @default(now())

    User  User  @relation(fields: [userId], references: [id])
    audio Audio @relation(fields: [audioId], references: [id])
}

// All models below are for audio and streaming data
model Audio {
    id               String   @id @default(cuid())
    userId           String
    title            String
    artist           String
    releaseDate      DateTime
    primaryGenre     String
    secondaryGenre   String
    language         String
    label            String
    copyrightHolder  String
    copyrightYear    String
    productionHolder String
    productionYear   String
    releaseCover     String
    releaseAudio     String?
    releaseAudioLink String?
    lyrics           String?
    releaseType      String
    status           String
    UPC              String   @default("")
    ISRC             String   @default("")
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    smartLink        String   @default("")

    User         User          @relation(fields: [userId], references: [id])
    dailyStreams DailyStream[] @relation("AudioDailyStreams")
    Metric       Metric[]
    Stream       Stream[]
    Track        Track[]
}

model Track {
    id               String  @id @default(cuid())
    audioId          String
    title            String
    lyrics           String?
    productionCredit String?
    ISRC             String?
    trackNumber      Int // Track number in the album
    audioLink        String // URL or path to track audio file

    Audio Audio @relation(fields: [audioId], references: [id])
}

model Platform {
    id           String        @id @default(cuid())
    name         String        @unique
    dailyStreams DailyStream[] @relation("PlatformDailyStreams")
}

model DailyStream {
    id            String   @id @default(cuid())
    date          DateTime // Specific date of the stream data
    streamCount   Int // Number of streams for the specific date
    downloadCount Int // Number of downloads for the specific date
    platformId    String
    platform      Platform @relation("PlatformDailyStreams", fields: [platformId], references: [id])
    audioId       String
    Audio         Audio    @relation("AudioDailyStreams", fields: [audioId], references: [id])

    @@unique([date, audioId, platformId])
}

model Metric {
    id          String   @id @default(cuid())
    metricType  String // Type of the metric (e.g., 'totalStreams', 'totalDownloads')
    value       Float // Value of the metric
    periodStart DateTime // Start of the period for the metric (e.g., '2024-08-01')
    periodEnd   DateTime // End of the period for the metric (e.g., '2024-08-07')
    audioId     String

    Audio Audio @relation(fields: [audioId], references: [id])

    @@unique([metricType, periodStart, periodEnd, audioId])
}
