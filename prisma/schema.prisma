generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    streams       Stream[] // Add the opposite relation field for the 'User' field in the 'streams' model
    audio         Audio[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Audio {
    id               String   @id @default(cuid())
    userId           String
    title            String
    artist           String
    releaseDate      DateTime
    primaryGenre     String
    secondaryGenre   String
    language         String
    label            String
    copyrightHolder  String
    copyrightYear    String
    productionHolder String
    productionYear   String
    releaseCover     String
    releaseAudio     String?
    releaseAudioLink String?
    lyrics           String?
    releaseType      String
    status           String
    UPC              String   @default("")
    ISRC             String   @default("")
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    smartLink        String   @default("")
    streams          Stream[]

    User User @relation(fields: [userId], references: [id])
}

model Stream {
    id            String   @id @default(cuid())
    userId        String
    audioId       String
    total_streams Int
    week_start    String
    week_end      String
    apple         Json?    @default("{}")
    spotify       Json?    @default("{}")
    youtube       Json?    @default("{}")
    amazon        Json?    @default("{}")
    tidal         Json?    @default("{}")
    deezer        Json?    @default("{}")
    boomPlay      Json?    @default("{}")
    tiktok        Json?    @default("{}")
    facebook      Json?    @default("{}")
    createdAt     DateTime @default(now())

    User  User  @relation(fields: [userId], references: [id])
    audio Audio @relation(fields: [audioId], references: [id])
}
